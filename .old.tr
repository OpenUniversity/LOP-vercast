
    BinTree init should initialize a binary tree with a single element
  ․ BinTree init should initialize a binary tree with a single element
    BinTree fetch should return the value associated with a key
  ․ BinTree fetch should return the value associated with a key
    BinTree fetch should return undefined if the key is not in the tree
  ․ BinTree fetch should return undefined if the key is not in the tree
    BinTree add should add a leaf to the tree, based on key comparison
  ․ BinTree add should add a leaf to the tree, based on key comparison
    BinTree add should report a conflict and not change the state if the the key already exists
  ․ BinTree add should report a conflict and not change the state if the the key already exists
    BinTree getMin should retrieve the the minimum key, with its associated value
  ․ BinTree getMin should retrieve the the minimum key, with its associated value
    BinTree remove should remove the element with the given key and value
  ․ BinTree remove should remove the element with the given key and value
    counter init should create a counter with value = 0
  ․ counter init should create a counter with value = 0
    counter add should add the given ammount to the counter value
  ․ counter add should add the given ammount to the counter value
    counter add should subtract the given amount when unapplied
  ․ counter add should subtract the given amount when unapplied
    counter get should return the counter value
  ․ counter get should return the counter value
    DummyObjectStore .init(ctx, className, args) should call the init() method of the relevant class with args as a parameter
  ․ DummyObjectStore .init(ctx, className, args) should call the init() method of the relevant class with args as a parameter
    DummyObjectStore .init(ctx, className, args) should return an ID (an object with a "$" attribute containing a string) of the newly created object
  ․ DummyObjectStore .init(ctx, className, args) should return an ID (an object with a "$" attribute containing a string) of the newly created object
    DummyObjectStore .trans(ctx, v1, p) should apply patch p to version v1 (v1 is a version ID), returning pair [v2, res] where v2 is the new version ID, and res is the result
  ․ DummyObjectStore .trans(ctx, v1, p) should apply patch p to version v1 (v1 is a version ID), returning pair [v2, res] where v2 is the new version ID, and res is the result
    DummyObjectStore .trans(ctx, v1, p) should replace the object if a _replaceWith field is added to the object
  ․ DummyObjectStore .trans(ctx, v1, p) should replace the object if a _replaceWith field is added to the object
    DummyObjectStore context should allow underlying initializations and transitions to perform initializations and transitions
  ․ DummyObjectStore context should allow underlying initializations and transitions to perform initializations and transitions
    ObjectDisp .init(ctx, className, args) should call the init() function associated with the class
  ․ ObjectDisp .init(ctx, className, args) should call the init() function associated with the class
    ObjectDisp .init(ctx, className, args) should throw an exception if the class does not exist
  ․ ObjectDisp .init(ctx, className, args) should throw an exception if the class does not exist
    ObjectDisp .init(ctx, className, args) should pass the given context and args to the class's init() function
  ․ ObjectDisp .init(ctx, className, args) should pass the given context and args to the class's init() function
    ObjectDisp .init(ctx, className, args) should return the value of the "this" object in the context of the class's init() function
  ․ ObjectDisp .init(ctx, className, args) should return the value of the "this" object in the context of the class's init() function
    ObjectDisp .init(ctx, className, args) should add a _type field to the returned object, containing the class name
  ․ ObjectDisp .init(ctx, className, args) should add a _type field to the returned object, containing the class name
    ObjectDisp .apply(ctx, obj, patch, unapply) should call the function with name matches the _type field of the patch, in the class associated with the object.
  ․ ObjectDisp .apply(ctx, obj, patch, unapply) should call the function with name matches the _type field of the patch, in the class associated with the object.
    ObjectDisp .apply(ctx, obj, patch, unapply) should throw an exception if the patch function is not defined
  ․ ObjectDisp .apply(ctx, obj, patch, unapply) should throw an exception if the patch function is not defined
    ObjectDisp .apply(ctx, obj, patch, unapply) should pass the object as the "this" parameter to the patch function
  ․ ObjectDisp .apply(ctx, obj, patch, unapply) should pass the object as the "this" parameter to the patch function
    ObjectDisp .apply(ctx, obj, patch, unapply) should pass the context, the patch and the unapply flag as parameters to the patch function
  ․ ObjectDisp .apply(ctx, obj, patch, unapply) should pass the context, the patch and the unapply flag as parameters to the patch function
    ObjectDisp .apply(ctx, obj, patch, unapply) should return a pair [obj, res], containing the patch function's "this" object, and its return value
  ․ ObjectDisp .apply(ctx, obj, patch, unapply) should return a pair [obj, res], containing the patch function's "this" object, and its return value
    ObjectDisp .apply(ctx, obj, patch, unapply) should use patch handlers if defined (prfixed with ":")
  ․ ObjectDisp .apply(ctx, obj, patch, unapply) should use patch handlers if defined (prfixed with ":")
    ObjectDisp .apply(ctx, obj, patch, unapply) should prefer a method defined in a class over a generic patch function if both are defined
  ․ ObjectDisp .apply(ctx, obj, patch, unapply) should prefer a method defined in a class over a generic patch function if both are defined

  28 passing (64ms)

