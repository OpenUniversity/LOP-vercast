
    BinTree init should initialize a binary tree with a single element
  ․ BinTree init should initialize a binary tree with a single element
    BinTree fetch should return the value associated with a key
  ․ BinTree fetch should return the value associated with a key
    BinTree fetch should return undefined if the key is not in the tree
  ․ BinTree fetch should return undefined if the key is not in the tree
    BinTree add should add a leaf to the tree, based on key comparison
  ․ BinTree add should add a leaf to the tree, based on key comparison
    BinTree add should report a conflict and not change the state if the the key already exists
  ․ BinTree add should report a conflict and not change the state if the the key already exists
    BinTree getMin should retrieve the the minimum key, with its associated value
  ․ BinTree getMin should retrieve the the minimum key, with its associated value
    BinTree remove should remove the element with the given key and value
  ․ BinTree remove should remove the element with the given key and value
  - BucketObjectStore as ObjectStore .init(ctx, className, args) should call the init() method of the relevant class with args as a parameter
  - BucketObjectStore as ObjectStore .init(ctx, className, args) should return an ID (an object with a "$" attribute containing a string) of the newly created object
  - BucketObjectStore as ObjectStore .trans(ctx, v1, p) should apply patch p to version v1 (v1 is a version ID), returning pair [v2, res] where v2 is the new version ID, and res is the result
  - BucketObjectStore as ObjectStore .trans(ctx, v1, p) should replace the object if a _replaceWith field is added to the object
  - BucketObjectStore as ObjectStore context should allow underlying initializations and transitions to perform initializations and transitions
    counter init should create a counter with value = 0
  ․ counter init should create a counter with value = 0
    counter add should add the given ammount to the counter value
  ․ counter add should add the given ammount to the counter value
    counter add should subtract the given amount when unapplied
  ․ counter add should subtract the given amount when unapplied
    counter get should return the counter value
  ․ counter get should return the counter value
    DummyBucketStore should accumulate all added items and replay them when fetched
  ․ DummyBucketStore should accumulate all added items and replay them when fetched
    DummyBucketStore should store each bucket individually
  ․ DummyBucketStore should store each bucket individually
    DummyObjectStore as ObjectStore .init(ctx, className, args) should call the init() method of the relevant class with args as a parameter
  ․ DummyObjectStore as ObjectStore .init(ctx, className, args) should call the init() method of the relevant class with args as a parameter
    DummyObjectStore as ObjectStore .init(ctx, className, args) should return an ID (an object with a "$" attribute containing a string) of the newly created object
  ․ DummyObjectStore as ObjectStore .init(ctx, className, args) should return an ID (an object with a "$" attribute containing a string) of the newly created object
    DummyObjectStore as ObjectStore .trans(ctx, v1, p) should apply patch p to version v1 (v1 is a version ID), returning pair [v2, res] where v2 is the new version ID, and res is the result
  ․ DummyObjectStore as ObjectStore .trans(ctx, v1, p) should apply patch p to version v1 (v1 is a version ID), returning pair [v2, res] where v2 is the new version ID, and res is the result
    DummyObjectStore as ObjectStore .trans(ctx, v1, p) should replace the object if a _replaceWith field is added to the object
  ․ DummyObjectStore as ObjectStore .trans(ctx, v1, p) should replace the object if a _replaceWith field is added to the object
    DummyObjectStore as ObjectStore context should allow underlying initializations and transitions to perform initializations and transitions
  ․ DummyObjectStore as ObjectStore context should allow underlying initializations and transitions to perform initializations and transitions
    ObjectDisp .init(ctx, className, args) should call the init() function associated with the class
  ․ ObjectDisp .init(ctx, className, args) should call the init() function associated with the class
    ObjectDisp .init(ctx, className, args) should throw an exception if the class does not exist
  ․ ObjectDisp .init(ctx, className, args) should throw an exception if the class does not exist
    ObjectDisp .init(ctx, className, args) should pass the given context and args to the class's init() function
  ․ ObjectDisp .init(ctx, className, args) should pass the given context and args to the class's init() function
    ObjectDisp .init(ctx, className, args) should return the value of the "this" object in the context of the class's init() function
  ․ ObjectDisp .init(ctx, className, args) should return the value of the "this" object in the context of the class's init() function
    ObjectDisp .init(ctx, className, args) should add a _type field to the returned object, containing the class name
  ․ ObjectDisp .init(ctx, className, args) should add a _type field to the returned object, containing the class name
    ObjectDisp .apply(ctx, obj, patch, unapply) should call the function with name matches the _type field of the patch, in the class associated with the object.
  ․ ObjectDisp .apply(ctx, obj, patch, unapply) should call the function with name matches the _type field of the patch, in the class associated with the object.
    ObjectDisp .apply(ctx, obj, patch, unapply) should throw an exception if the patch function is not defined
  ․ ObjectDisp .apply(ctx, obj, patch, unapply) should throw an exception if the patch function is not defined
    ObjectDisp .apply(ctx, obj, patch, unapply) should pass the object as the "this" parameter to the patch function
  ․ ObjectDisp .apply(ctx, obj, patch, unapply) should pass the object as the "this" parameter to the patch function
    ObjectDisp .apply(ctx, obj, patch, unapply) should pass the context, the patch and the unapply flag as parameters to the patch function
  ․ ObjectDisp .apply(ctx, obj, patch, unapply) should pass the context, the patch and the unapply flag as parameters to the patch function
    ObjectDisp .apply(ctx, obj, patch, unapply) should return a pair [obj, res], containing the patch function's "this" object, and its return value
  ․ ObjectDisp .apply(ctx, obj, patch, unapply) should return a pair [obj, res], containing the patch function's "this" object, and its return value
    ObjectDisp .apply(ctx, obj, patch, unapply) should use patch handlers if defined (prfixed with ":")
  ․ ObjectDisp .apply(ctx, obj, patch, unapply) should use patch handlers if defined (prfixed with ":")
    ObjectDisp .apply(ctx, obj, patch, unapply) should prefer a method defined in a class over a generic patch function if both are defined
  ․ ObjectDisp .apply(ctx, obj, patch, unapply) should prefer a method defined in a class over a generic patch function if both are defined
    Scheduler allows users to register a callback to a condition. Once the condition is met, the callback is called
  ․ Scheduler allows users to register a callback to a condition. Once the condition is met, the callback is called
    Scheduler should not call a callback unless the has been met
  ․ Scheduler should not call a callback unless the has been met
    Scheduler should allow multiple registrations on the same condition
  ․ Scheduler should allow multiple registrations on the same condition
    Scheduler should call each callback only once even if notified multiple times
  ․ Scheduler should call each callback only once even if notified multiple times
    Scheduler should call a callback only when all conditions are met
  ․ Scheduler should call a callback only when all conditions are met
    SimpleCache .store(id, obj[, json]) should store an object in the cache under the given ID
  ․ SimpleCache .store(id, obj[, json]) should store an object in the cache under the given ID
    SimpleCache .store(id, obj[, json]) should retrieve the same instance on a first fetch
  ․ SimpleCache .store(id, obj[, json]) should retrieve the same instance on a first fetch
    SimpleCache .store(id, obj[, json]) should retrieve the same object once and again, even if it was modified on the outside
  ․ SimpleCache .store(id, obj[, json]) should retrieve the same object once and again, even if it was modified on the outside
    SimpleCache .store(id, obj[, json]) should use the json argument, if supplied, as the JSON representation of the object to be used when the instance is no longer available
  ․ SimpleCache .store(id, obj[, json]) should use the json argument, if supplied, as the JSON representation of the object to be used when the instance is no longer available
    SimpleCache .abolish() should remove all elements from the cache
  ․ SimpleCache .abolish() should remove all elements from the cache
    vercast .hash(obj) should return a SHA-256 digest of the given string
  ․ vercast .hash(obj) should return a SHA-256 digest of the given string

  41 passing (69ms)
  5 pending

